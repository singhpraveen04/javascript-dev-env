Options:
Babel,
Typescript
Elm

Babel : Modern, standard-based JS,today (ES5).
Write standardized JS
Leverage full JS Ecosystem
Use experimental features earlier
No type defs, annotations required
ES6 imports are statically analyzable
Test, Lint, Babel, Great libs, IDE = safety

TypeScript : Superset of JavaScript
Enhanced autocompletion
Safer refactoring
Clearer intent

ELM: Compiles down to JS
Clean Syntax
Immutable data structures
Friendly errors
All errors are compile-time errors
Interops with JS

Lets go ahead with Babel.

Babel uses two methods for configuration:
1) .babelrc
2) package.json

More common approach is using babelrc file. It should be placed in root folder.

babelrc:
1) Not npm specific
2) Easier to read since isolated

if we choose package.json file:
1) One less file in your project
2) place the babel configuration in babel section

babel can process experimental features as well.

Build Script JS Style:
ES5
	No waiting for transpile = faster
	No tanspile dependency

Transpiled
	Enjoy the latest features
	Consistent coding style
	Use the same linting rules everywhere
	Can eventually remove transpiler

Lets transpile the code with babel:

in root folder create file .babelrc
code:
{
  
	"presets": [
    
		"latest"
  
	]

}

to use all latest features.

In startmessage.js 
use import chalk from 'chalk';

to resolve error
in package.json, prestart script use babel-node instead of node

